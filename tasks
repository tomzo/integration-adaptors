#!/bin/bash -e

set -Eeo pipefail

IMAGE_REPO_NAME=mhs-unbound-dns

AWS_REGION=eu-west-2
AWS_DEFAULT_REGION=$AWS_REGION

function get_aws_ssm_secret {
  secret_id=$1
  json=$(aws ssm get-parameter --with-decryption --region $AWS_REGION --name $secret_id)
  if [ $? != 0 ]; then
    >&2 echo "Failed to obtain AWS secret from SSM: $secret_id"
    exit 5
  fi
  echo $json | jq -r ".Parameter.Value"
}

function get_aws_sm_secret {
  secret_id=$1
  json=$(aws secretsmanager get-secret-value --region $AWS_REGION --secret-id $secret_id)
  if [ $? != 0 ]; then
    >&2 echo "Failed to obtain AWS secret from Secrets Manager: $secret_id"
    exit 5
  fi
  echo $json | jq -r ".SecretString"
}

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function docker_login {
  eval $(dojo "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

command="$1"
case "${command}" in
  _build_docker)
    IMAGE_PREFIX=$2
    if [ -z "$IMAGE_PREFIX" ]; then
      echo "Please specify one of the images to be built: inbound, outbound, or route"
      exit 5
    fi
    export BUILD_TAG=latest
    export DOCKER_REGISTRY=327778747031.dkr.ecr.eu-west-2.amazonaws.com
    eval $(aws ecr get-login --region eu-west-2 --no-include-email)
    image_tag=$(git rev-parse HEAD)
    packer build -except publish pipeline/packer/${IMAGE_PREFIX}.json
    docker tag local/mhs-$IMAGE_PREFIX $DOCKER_REGISTRY/mhs-${IMAGE_PREFIX}:$image_tag
    docker push $DOCKER_REGISTRY/mhs-${IMAGE_PREFIX}:$image_tag
    ;;
  build_docker)
    dojo "./tasks _build_docker $2"
    ;;
  test_docker)
    IMAGE_PREFIX=$2
    if [ -z "$IMAGE_PREFIX" ]; then
      echo "Please specify one of the images to be built: inbound, outbound, or route"
      exit 5
    fi
    IMAGE=local/mhs-$IMAGE_PREFIX
    # test that docker image trusts the server certificate in PTL-integration
    docker run --rm -v $PWD:/test --entrypoint sh $IMAGE -c "openssl verify -verbose /test/test-assets/smsp.crt"
    docker run --rm -v $PWD:/test --entrypoint sh $IMAGE -c "openssl verify -verbose /test/test-assets/pds-ldaps.crt"
    ;;
  build_docker_dns_local)
    REPOSITORY_URI=$IMAGE_REPO_NAME
    IMAGE_TAG=$(git rev-parse HEAD | cut -c 1-8)
    cd unbound-dns
    docker build -t $REPOSITORY_URI:latest .
    docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
    ;;
  build_docker_dns)
    docker_login
    AWS_ACCOUNT_ID=$(dojo "aws sts get-caller-identity | jq -r .Account")
    REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$IMAGE_REPO_NAME
    ./tasks build_docker_dns_local
    COMMIT_HASH=$(git rev-parse HEAD | cut -c 1-8)
    IMAGE_TAG=${COMMIT_HASH}
    docker tag $IMAGE_REPO_NAME $REPOSITORY_URI:$IMAGE_TAG
    docker tag $IMAGE_REPO_NAME $REPOSITORY_URI:latest
    docker push $REPOSITORY_URI:latest
    docker push $REPOSITORY_URI:$IMAGE_TAG
    ;;
  test_docker_dns)
    echo "TODO: dns docker image tests"
    ;;
  _e2e_tests)
    check_env
    export INTEGRATION_TEST_ASID=$(get_aws_ssm_secret "/NHS/deductions/opentest-integration_test_asid")
    if [ -z "$INTEGRATION_TEST_ASID" ]; then
      echo "Failed to get INTEGRATION_TEST_ASID"
      exit 1
    fi
    export MHS_SECRET_INBOUND_QUEUE_USERNAME=$(get_aws_sm_secret "/nhs/${NHS_ENVIRONMENT}/mq/app-username")
    export MHS_SECRET_INBOUND_QUEUE_PASSWORD=$(get_aws_sm_secret "/nhs/${NHS_ENVIRONMENT}/mq/app-password")
    if [ -z "$MHS_SECRET_INBOUND_QUEUE_USERNAME" ]; then
      echo "Failed to get MHS_SECRET_INBOUND_QUEUE_USERNAME"
      exit 1
    fi
    if [ -z "$MHS_SECRET_INBOUND_QUEUE_PASSWORD" ]; then
      echo "Failed to get MHS_SECRET_INBOUND_QUEUE_PASSWORD"
      exit 1
    fi
    export MHS_INBOUND_QUEUE_URL=amqps://b-93946876-8604-4815-8ef3-eb4f1dc68c95-2.mq.eu-west-2.amazonaws.com:5671
    export MHS_ADDRESS=https://mhs-outbound-${NHS_ENVIRONMENT}.mhs.patient-deductions.nhs.uk
    export MHS_DYNAMODB_ENDPOINT_URL=https://dynamodb.eu-west-2.amazonaws.com
    export MHS_DYNAMODB_TABLE_NAME=${NHS_ENVIRONMENT}-mhs-state
    export MHS_SYNC_ASYNC_TABLE_NAME=${NHS_ENVIRONMENT}-mhs-sync-async-state
    cd integration-tests/integration_tests
    pipenv install -d
    pipenv run inttests
    ;;
  e2e_tests)
    dojo -c Dojofile-py "./tasks _e2e_tests"
    ;;
  _unit_tests_inbound)
    cd mhs/inbound
    pipenv install -d
    pipenv run unittests
    ;;
  unit_tests_inbound)
    dojo -c Dojofile-py "./tasks _unit_tests_inbound"
    ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
